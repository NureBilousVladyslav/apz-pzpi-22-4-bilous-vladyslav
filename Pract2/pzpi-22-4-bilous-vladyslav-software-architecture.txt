Харківський університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії


Звіт 
 до практичного заняття з дисципліни 
«Архітектура програмного забезпечення» 
на тему «Архітектура відомих програмних систем»
(завдання №2)








Харків 2025
 
1 ІСТОРІЯ ЗМІН

№	Дата	Версія звіту	Опис змін та виправлень
1	26.04.2025	0.1	Створено розділи «Завдання», «Опис зміни»
2	04.05.2025	0.2	Створено розділ «Висновки» та додаток 
«Додаток Б»
3	05.05.2025	0.3	Створений додаток «Додаток А»

 
2 ЗАВДАННЯ

Дослідити архітектуру програмної системи Telegram, її структуру, ключові компоненти, технології, масштабування та безпеку. Підготувати доповідь, проаналізувавши принципи взаємодії компонентів, підходи до обробки даних і забезпечення конфіденційності. Вивчити клієнт-серверну модель, механізми шифрування та способи горизонтального масштабування. Використати відкриті джерела, такі як технічна документація, блоги та статті. Сформувати висновки щодо ефективності та особливостей архітектури Telegram.
 
3	ОПИС ВИКОНАНОЇ РОБОТИ

У межах практичного заняття було проведено дослідження архітектури програмної системи Telegram — популярного кросплатформового месенджера, відомого своєю швидкістю, безпекою та підтримкою великих груп і каналів. Метою роботи було аналіз структури системи, її компонентів, архітектурного стилю, технологічного стеку, механізмів масштабування та підходів до забезпечення безпеки. Дослідження базувалося на відкритих джерелах, зокрема офіційній документації Telegram, технічних статтях, доповідях розробників і матеріалах з Вікіпедії.
Архітектура Telegram є прикладом розподіленої клієнт-серверної системи, яка підтримує високе навантаження та забезпечує швидкий доступ до даних. Клієнтський рівень реалізований для різних платформ (iOS, Android, Windows, macOS, Linux, веб) за допомогою нативних бібліотек і фреймворків, таких як Swift, Kotlin і JavaScript. Клієнти взаємодіють із серверами через власний протокол MTProto, який поєднує симетричне та асиметричне шифрування для захисту даних. Серверний рівень складається з розподілених дата-центрів, що використовують горизонтальне масштабування для обробки мільярдів повідомлень щодня. Для зберігання даних застосовуються власні розподілені бази даних, оптимізовані для швидкого доступу та кешування.
Особлива увага приділялася безпеці: Telegram пропонує два типи чатів — хмарні (з серверним шифруванням) і секретні (з наскрізним шифруванням). MTProto забезпечує захист від атак типу "людина посередині" та підтримує авторизацію через ключі. Масштабованість досягається завдяки розподіленій архітектурі, де сервери розподіляють навантаження, а дані реплікуються між дата-центрами. Протокол API Telegram дозволяє розробникам створювати боти та інтеграції, що робить систему гнучкою та розширюваною. Однак мінімальна модерація контенту та потенційна вразливість хмарних чатів до доступу зловмисників є викликами для безпеки.
Дослідження показало, що Telegram використовує унікальний підхід до балансування між швидкістю, масштабованістю та безпекою, що робить його однією з найефективніших систем для обміну повідомленнями. Аналіз архітектури виявив, як продумана структура та власні технології дозволяють системі обробляти величезні обсяги даних, зберігаючи при цьому високу швидкість і надійність.
 
4	ВИСНОВКИ

Архітектура Telegram демонструє ефективний баланс між швидкістю, масштабованістю та безпекою, що робить її однією з провідних платформ для обміну повідомленнями. Використання власного протоколу MTProto та розподілених дата-центрів дозволяє системі обробляти мільярди повідомлень щодня, забезпечуючи швидкий доступ до даних і підтримку великих груп до 200,000 користувачів. Клієнт-серверна модель із горизонтальним масштабуванням і кешуванням даних сприяє високій продуктивності навіть при пікових навантаженнях.
Безпека залишається ключовим аспектом, але має свої особливості: секретні чати з наскрізним шифруванням гарантують високий рівень конфіденційності, тоді як хмарні чати, що зберігаються на серверах, можуть бути вразливими до доступу в разі компрометації серверів. Відсутність активної модерації контенту створює ризики поширення незаконних матеріалів, що є викликом для платформи. Проте гнучкість API та підтримка ботів роблять Telegram привабливим для розробників, дозволяючи створювати складні інтеграції та автоматизовані сервіси.
Загалом, архітектура Telegram є прикладом інноваційного підходу до створення масштабованої та швидкої системи, яка відповідає потребам мільйонів користувачів. Її успіх базується на продуманій інфраструктурі, власних технологіях і фокусі на користувацькому досвіді. Подальший розвиток системи може бути пов’язаний із посиленням безпеки хмарних чатів і вдосконаленням модерації для підвищення довіри користувачів.
 
Додаток А
(посилання на відеозапис доповіді та текст хронологічного опису доповіді)
Посилання на відео-звіт доповіді: https://youtu.be/ys9xFQ3s0ws
Хронологічний опис доповіді:
00:00 – Вступ до доповіді;  
00:10 - Вступ до Telegram;  
01:02 - Мета та завдання дослідження;  
01:37 - Загальна архітектура системи;  
02:46 - Клієнтський рівень;  
03:35 - Серверний рівень;  
04:34 - Протокол MTProto;  
06:14 - Масштабованість системи;  
07:58 - Безпека та шифрування;  
09:28 - API та боти;  
10:35 - Переваги та недоліки архітектури;  
12:06 - Висновки;  
13:41 - Використані джерела;   
Додаток Б 
(слайди презентації доповіді)

 
Рисунок Б.1 – Титульна сторінка презентації

 
Рисунок Б.2 – Вступ до Telegram
 
Рисунок Б.3 – Мета та завдання дослідження

 
Рисунок Б.4 – Загальна архітектура системи

 
Рисунок Б.5 – Клієнтський рівень

 
Рисунок Б.6 – Серверний рівень

 
Рисунок Б.7 – Протокол MTProto

 
Рисунок Б.8 – Масштабованість системи

 
Рисунок Б.9 – Безпека та шифрування

 
Рисунок Б.10 – API та боти

 
Рисунок Б.11 – Переваги та недоліки архітектури

 
Рисунок Б.12 – Висновки

 
Рисунок Б.13 – Використані джерела
